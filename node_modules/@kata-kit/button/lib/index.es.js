import { Circle } from '@kata-kit/loading';
import React__default, { createElement, Fragment, Component } from 'react';
import styled, { css, keyframes } from 'styled-components';
import ThemedComponent, { variables } from '@kata-kit/theme';
import { darken, lighten } from 'polished';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

var primary = {
    backgroundColor: variables.colors.cobalt,
    backgroundColorHover: variables.colors.semiCobalt,
    backgroundColorActive: variables.colors.darkCobalt,
    textColor: variables.colors.white,
    linkColorHover: variables.colors.white,
    linkColorActive: variables.colors.white
};
var secondary = {
    backgroundColor: variables.colors.gray10,
    backgroundColorHover: variables.colors.gray20,
    backgroundColorActive: variables.colors.gray70,
    textColor: variables.colors.gray50,
    linkColorHover: variables.colors.gray50,
    linkColorActive: variables.colors.white
};
var success = {
    backgroundColor: variables.colors.green,
    backgroundColorHover: lighten(0.025, variables.colors.green),
    backgroundColorActive: darken(0.025, variables.colors.green),
    textColor: variables.colors.white,
    linkColorHover: variables.colors.white,
    linkColorActive: variables.colors.white
};
var warning = {
    backgroundColor: variables.colors.yellow,
    backgroundColorHover: lighten(0.05, variables.colors.yellow),
    backgroundColorActive: darken(0.025, variables.colors.yellow),
    textColor: variables.colors.gray70,
    linkColorHover: variables.colors.gray70,
    linkColorActive: variables.colors.gray70
};
var danger = {
    backgroundColor: variables.colors.red,
    backgroundColorHover: lighten(0.05, variables.colors.red),
    backgroundColorActive: darken(0.05, variables.colors.red),
    textColor: variables.colors.white,
    linkColorHover: variables.colors.white,
    linkColorActive: variables.colors.white
};
var white = {
    backgroundColor: variables.colors.white,
    backgroundColorHover: variables.colors.gray10,
    backgroundColorActive: variables.colors.gray70,
    textColor: variables.colors.gray70,
    linkColorHover: variables.colors.gray70,
    linkColorActive: variables.colors.white,
    borderColor: variables.colors.gray30,
    borderColorActive: variables.colors.gray70
};
var buttonThemes = {
    primary: primary,
    secondary: secondary,
    success: success,
    warning: warning,
    danger: danger,
    white: white,
    info: primary,
    defaultTheme: secondary
};

var themes = {
    button: buttonThemes
};

var ButtonBase = function (props) {
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    display: ", ";\n    position: relative;\n    width: ", ";\n    background: none;\n    letter-spacing: 0.2px;\n    border: 1px solid transparent;\n    font-size: ", ";\n    line-height: ", ";\n    text-decoration: none;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    user-select: none;\n    transition: all 0.3s ease;\n\n    &:hover {\n      text-decoration: none;\n    }\n\n    &:focus {\n      text-decoration: none;\n      outline: 0;\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    &.focus {\n      outline: 0;\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    &:not(:disabled):not(.disabled) {\n      cursor: pointer;\n    }\n\n    &.disabled,\n    &:disabled {\n      opacity: 0.65;\n      color: ", ";\n    }\n\n    &.icon {\n      height: 32px;\n      width: 32px;\n      padding: 4px 8px;\n      text-align: center;\n      background-color: transparent;\n      color: ", ";\n\n      i {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n      }\n\n      &:disabled,\n      &.disabled {\n        &:hover,\n        &:focus,\n        &:active {\n          color: ", ";\n        }\n      }\n\n      i:before {\n        font-size: 16px;\n      }\n    }\n  "], ["\n    display: ", ";\n    position: relative;\n    width: ", ";\n    background: none;\n    letter-spacing: 0.2px;\n    border: 1px solid transparent;\n    font-size: ", ";\n    line-height: ", ";\n    text-decoration: none;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    user-select: none;\n    transition: all 0.3s ease;\n\n    &:hover {\n      text-decoration: none;\n    }\n\n    &:focus {\n      text-decoration: none;\n      outline: 0;\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    &.focus {\n      outline: 0;\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    &:not(:disabled):not(.disabled) {\n      cursor: pointer;\n    }\n\n    &.disabled,\n    &:disabled {\n      opacity: 0.65;\n      color: ", ";\n    }\n\n    &.icon {\n      height: 32px;\n      width: 32px;\n      padding: 4px 8px;\n      text-align: center;\n      background-color: transparent;\n      color: ", ";\n\n      i {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n      }\n\n      &:disabled,\n      &.disabled {\n        &:hover,\n        &:focus,\n        &:active {\n          color: ", ";\n        }\n      }\n\n      i:before {\n        font-size: 16px;\n      }\n    }\n  "])), props.block ? 'block' : 'inline-block', props.block ? '100%' : 'auto', props.size === 'sm' ? '11px' : '13px', props.size === 'sm' ? '16px' : '20px', variables.colors.white, variables.colors.gray60, variables.colors.gray60);
};
var templateObject_1;

var InvisibleText = styled('span')(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["\n  visibility: hidden;\n"], ["\n  visibility: hidden;\n"])));
var templateObject_1$1;

var Button = (function (_super) {
    __extends(Button, _super);
    function Button(props) {
        var _this = _super.call(this, props) || this;
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }
    Button.prototype.onClick = function (e) {
        if (this.props.disabled) {
            e.preventDefault();
            return;
        }
        if (this.props.onClick) {
            this.props.onClick(e);
        }
    };
    Button.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, color = _a.color, type = _a.type, loading = _a.loading, disabled = _a.disabled, isIcon = _a.isIcon, children = _a.children, props = __rest(_a, ["className", "color", "type", "loading", "disabled", "isIcon", "children"]);
        return (createElement(ThemedComponent, { color: color, themes: themes.button }, function (themeAttributes) { return (createElement(ButtonWrapper, __assign({ className: classnames(isIcon && 'icon', className), type: type, onClick: _this.onClick, disabled: disabled || loading, color: color, isIcon: isIcon }, props, themeAttributes), loading ? (createElement(Fragment, null,
            createElement(LoaderCircle, { className: classnames(color, className), size: 30 }),
            createElement(InvisibleText, null, children))) : (children))); }));
    };
    Button.defaultProps = {
        color: 'secondary',
        type: 'button',
        size: 'lg',
        block: false,
        active: false,
        disabled: false,
        outline: false
    };
    return Button;
}(Component));
var LoaderCircle = styled(Circle)(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["\n  margin: -6px 0;\n  position: absolute;\n  left: 50%;\n  margin-left: -15px;\n\n  svg path,\n  svg rect {\n    fill: #fff /* $white */;\n  }\n\n  .white {\n    svg path,\n    svg rect {\n      fill: #484c4f /* $gray-70 */;\n    }\n  }\n"], ["\n  margin: -6px 0;\n  position: absolute;\n  left: 50%;\n  margin-left: -15px;\n\n  svg path,\n  svg rect {\n    fill: #fff /* $white */;\n  }\n\n  .white {\n    svg path,\n    svg rect {\n      fill: #484c4f /* $gray-70 */;\n    }\n  }\n"])));
var isIconStyles = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", " {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n\n    svg {\n      width: 24px;\n      height: 24px;\n    }\n\n    svg path,\n    svg rect {\n      fill: ", ";\n    }\n  }\n"], ["\n  ", " {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n\n    svg {\n      width: 24px;\n      height: 24px;\n    }\n\n    svg path,\n    svg rect {\n      fill: ", ";\n    }\n  }\n"])), LoaderCircle, variables.colors.kataBlue);
var ButtonWrapper = styled('button')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  ", ";\n  padding: ", ";\n  height: ", ";\n  font-weight: ", ";\n  border-radius: 4px;\n\n  &:not(:disabled):not(.disabled) {\n    color: ", ";\n    border-color: ", ";\n    background-color: ", ";\n\n    &:hover {\n      color: ", ";\n      border-color: ", ";\n      background-color: ", ";\n    }\n\n    &:active,\n    &.active {\n      color: ", ";\n      border-color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background-color: ", ";\n    border-color: ", ";\n\n    &:hover {\n      background-color: ", ";\n      border-color: ", ";\n    }\n  }\n\n  ", ";\n"], ["\n  ", ";\n  padding: ", ";\n  height: ", ";\n  font-weight: ", ";\n  border-radius: 4px;\n\n  &:not(:disabled):not(.disabled) {\n    color: ", ";\n    border-color: ", ";\n    background-color: ",
    ";\n\n    &:hover {\n      color: ", ";\n      border-color: ", ";\n      background-color: ", ";\n    }\n\n    &:active,\n    &.active {\n      color: ", ";\n      border-color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background-color: ",
    ";\n    border-color: ",
    ";\n\n    &:hover {\n      background-color: ",
    ";\n      border-color: ",
    ";\n    }\n  }\n\n  ", ";\n"])), function (props) { return ButtonBase(props); }, function (props) { return (props.size === 'sm' ? '8px 16px' : '10px 24px'); }, function (props) { return (props.size === 'sm' ? '32px' : '40px'); }, function (props) { return (props.size === 'sm' ? '700' : '500'); }, function (props) { return props.textColor; }, function (props) { return props.borderColor; }, function (props) {
    return props.isIcon ? 'transparent' : props.backgroundColor;
}, function (props) { return props.linkColorHover; }, function (props) { return props.borderColorHover; }, function (props) { return props.backgroundColorHover; }, function (props) { return props.linkColorActive; }, function (props) { return props.borderColorActive; }, function (props) { return props.backgroundColorActive; }, function (props) {
    return props.isIcon ? props.backgroundColorHover : '#c2c7c8';
}, function (props) {
    return props.isIcon ? 'transparent' : darken(0.1, '#c2c7c8');
}, function (props) {
    return props.isIcon ? props.backgroundColorHover : '#c2c7c8';
}, function (props) {
    return props.isIcon ? 'transparent' : darken(0.1, '#c2c7c8');
}, function (props) { return props.isIcon && isIconStyles; });
var templateObject_1$2, templateObject_2, templateObject_3;

var ButtonGroup = (function (_super) {
    __extends(ButtonGroup, _super);
    function ButtonGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonGroup.prototype.render = function () {
        var _a = this.props, children = _a.children, rest = __rest(_a, ["children"]);
        return (createElement(ThemedComponent, { themes: themes.button }, function (themeAttributes) { return (createElement(Root, __assign({}, rest, themeAttributes), children)); }));
    };
    return ButtonGroup;
}(Component));
var Root = styled('div')(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["\n  border-collapse: collapse;\n\n  button,\n  a {\n    border-radius: 0;\n\n    &:first-child {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n\n    &:last-child {\n      border-top-right-radius: 4px;\n      border-bottom-right-radius: 4px;\n    }\n  }\n"], ["\n  border-collapse: collapse;\n\n  button,\n  a {\n    border-radius: 0;\n\n    &:first-child {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n\n    &:last-child {\n      border-top-right-radius: 4px;\n      border-bottom-right-radius: 4px;\n    }\n  }\n"])));
var templateObject_1$3;

var FloatingButton = (function (_super) {
    __extends(FloatingButton, _super);
    function FloatingButton(props) {
        var _this = _super.call(this, props) || this;
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }
    FloatingButton.prototype.onClick = function (e) {
        if (this.props.disabled) {
            e.preventDefault();
            return;
        }
        if (this.props.onClick) {
            this.props.onClick(e);
        }
    };
    FloatingButton.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, icon = _a.icon, size = _a.size, color = _a.color, type = _a.type, active = _a.active, disabled = _a.disabled, isLoading = _a.isLoading, props = __rest(_a, ["className", "icon", "size", "color", "type", "active", "disabled", "isLoading"]);
        var classes = classnames(color, active, className);
        return (createElement(ThemedComponent, { themes: themes.button }, function (themeAttributes) { return (createElement(FloatingButtonWrapper, __assign({ type: type, className: classes, onClick: _this.onClick, disabled: disabled }, props, themeAttributes), isLoading ? (createElement(Fragment, null,
            createElement(LoaderCircle$1, { size: 40 }))) : (createElement("i", { className: "icon-" + icon })))); }));
    };
    FloatingButton.defaultProps = {
        color: 'primary',
        type: 'button',
        active: false,
        disabled: false
    };
    return FloatingButton;
}(Component));
var popIn = keyframes(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["\n  from {\n    transform: scale(0);\n  }\n  to {\n    transform: scale(1);\n  }\n"], ["\n  from {\n    transform: scale(0);\n  }\n  to {\n    transform: scale(1);\n  }\n"])));
var _a = variables.transitions, transitionFast = _a.transitionFast, transitionEasing = _a.transitionEasing;
var FloatingButtonWrapper = styled('button')(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["\n  ", " height: 40px;\n  width: 40px;\n  font-weight: 500;\n  border-radius: 50%;\n  line-height: 1;\n  box-shadow: ", ";\n  font-size: 16px;\n  vertical-align: middle;\n  color: ", ";\n  background-color: ", ";\n  align-items: center;\n  justify-content: center;\n  position: relative;\n\n  animation: ", " ", " ", ";\n\n  &:focus {\n    box-shadow: ", ";\n  }\n\n  &.focus {\n    box-shadow: ", ";\n  }\n\n  &.corner-right {\n    position: absolute;\n    top: -16px;\n    right: -16px;\n  }\n\n  i::before {\n    vertical-align: middle;\n  }\n\n  &.primary {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.success {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.danger {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.warning {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background-color: ", ";\n    color: ", ";\n\n    &:hover {\n      color: ", ";\n    }\n  }\n"], ["\n  ", " height: 40px;\n  width: 40px;\n  font-weight: 500;\n  border-radius: 50%;\n  line-height: 1;\n  box-shadow: ", ";\n  font-size: 16px;\n  vertical-align: middle;\n  color: ", ";\n  background-color: ", ";\n  align-items: center;\n  justify-content: center;\n  position: relative;\n\n  animation: ", " ", " ", ";\n\n  &:focus {\n    box-shadow: ", ";\n  }\n\n  &.focus {\n    box-shadow: ", ";\n  }\n\n  &.corner-right {\n    position: absolute;\n    top: -16px;\n    right: -16px;\n  }\n\n  i::before {\n    vertical-align: middle;\n  }\n\n  &.primary {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.success {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.danger {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &.warning {\n    &:hover,\n    &:active {\n      color: ", ";\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background-color: ", ";\n    color: ", ";\n\n    &:hover {\n      color: ", ";\n    }\n  }\n"])), ButtonBase, variables.layerShadows.layer200Shadow, variables.colors.gray60, variables.colors.white, popIn, transitionFast, transitionEasing, variables.layerShadows.layer200Shadow, variables.layerShadows.layer200Shadow, variables.colors.kataBlue, variables.colors.green, variables.colors.red, variables.colors.yellow, variables.colors.gray10, variables.colors.gray60, variables.colors.gray60);
var LoaderCircle$1 = styled(Circle)(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  left: -1px;\n"], ["\n  position: absolute;\n  top: 0;\n  left: -1px;\n"])));
var templateObject_1$4, templateObject_2$1, templateObject_3$1;

var SupportButton = (function (_super) {
    __extends(SupportButton, _super);
    function SupportButton(props) {
        var _this = _super.call(this, props) || this;
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }
    SupportButton.prototype.onClick = function (e) {
        if (this.props.disabled) {
            e.preventDefault();
            return;
        }
        if (this.props.onClick) {
            this.props.onClick(e);
        }
    };
    SupportButton.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, size = _a.size, block = _a.block, active = _a.active, disabled = _a.disabled, isIcon = _a.isIcon, outline = _a.outline, loading = _a.loading, props = __rest(_a, ["className", "size", "block", "active", "disabled", "isIcon", "outline", "loading"]);
        var classes = classnames(size ? "btn-" + size : false, block ? "btn-block" : false, {
            active: active,
            icon: isIcon
        }, className);
        return (createElement(ThemedComponent, { themes: themes.button }, function (themeAttributes) { return (createElement(SupportButtonWrapper, __assign({ type: "button", className: classes, onClick: _this.onClick, disabled: disabled, loading: loading }, props, themeAttributes), loading ? (createElement(Fragment, null,
            createElement(LoaderCircle$2, { "data-testid": "SupportButton-loaderCircle", size: 30 }),
            createElement(InvisibleText$1, null, _this.props.children))) : (_this.props.children))); }));
    };
    SupportButton.defaultProps = {
        block: false,
        active: false,
        disabled: false,
        outline: false
    };
    return SupportButton;
}(Component));
var LoaderCircle$2 = styled(Circle)(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["\n  position: absolute;\n  left: 50%;\n  margin-left: -16px;\n  margin-top: -8px;\n"], ["\n  position: absolute;\n  left: 50%;\n  margin-left: -16px;\n  margin-top: -8px;\n"])));
var InvisibleText$1 = styled('span')(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject(["\n  visibility: hidden;\n"], ["\n  visibility: hidden;\n"])));
var SupportButtonWrapper = styled('button')(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject(["\n  ", " padding: 8px 16px;\n  border-radius: 4px;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: #fff;\n  position: ", ";\n\n  &:hover {\n    background-color: ", ";\n    color: ", ";\n  }\n\n  &:focus {\n    box-shadow: unset;\n\n    color: ", ";\n    background-color: ", ";\n\n    ", " {\n      svg path,\n      svg rect {\n        fill: ", ";\n      }\n    }\n  }\n\n  &.icon {\n    height: 32px;\n    width: 32px;\n    padding: 8px;\n    text-align: center;\n    background: none;\n    color: $gray-60;\n\n    i:before {\n      font-size: 16px;\n    }\n  }\n"], ["\n  ", " padding: 8px 16px;\n  border-radius: 4px;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: #fff;\n  position: ", ";\n\n  &:hover {\n    background-color: ", ";\n    color: ", ";\n  }\n\n  &:focus {\n    box-shadow: unset;\n\n    color: ", ";\n    background-color: ", ";\n\n    ", " {\n      svg path,\n      svg rect {\n        fill: ", ";\n      }\n    }\n  }\n\n  &.icon {\n    height: 32px;\n    width: 32px;\n    padding: 8px;\n    text-align: center;\n    background: none;\n    color: $gray-60;\n\n    i:before {\n      font-size: 16px;\n    }\n  }\n"])), ButtonBase, variables.colors.gray50, variables.colors.gray30, function (props) { return (props.loading ? 'relative !important' : 'inherit'); }, variables.colors.gray10, variables.colors.gray50, variables.colors.white, variables.colors.gray70, LoaderCircle$2, variables.colors.white);
var templateObject_1$5, templateObject_2$2, templateObject_3$2;

var ToggleButton = (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            active: _this.props.active || false
        };
        _this.handleToggle = _this.handleToggle.bind(_this);
        _this.renderState = _this.renderState.bind(_this);
        return _this;
    }
    ToggleButton.prototype.handleToggle = function () {
        var _this = this;
        this.setState(function (state) { return ({
            active: !state.active
        }); }, function () {
            if (_this.props.onToggle) {
                _this.props.onToggle(_this.state.active);
            }
        });
    };
    ToggleButton.prototype.render = function () {
        var _this = this;
        return (createElement(ThemedComponent, { themes: themes.button }, function (themeAttributes) { return (createElement(Root$1, __assign({ className: "kata-toggle-button", onClick: _this.handleToggle }, themeAttributes), _this.renderState())); }));
    };
    ToggleButton.prototype.renderState = function () {
        if (this.state.active) {
            return this.props.renderActive();
        }
        return this.props.renderInactive();
    };
    return ToggleButton;
}(Component));
var Root$1 = styled('div')(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject([""], [""])));
var templateObject_1$6;

var HollowButton = (function (_super) {
    __extends(HollowButton, _super);
    function HollowButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClick = function (e) {
            if (_this.props.disabled) {
                e.preventDefault();
                return;
            }
            if (_this.props.onClick) {
                _this.props.onClick(e);
            }
        };
        return _this;
    }
    HollowButton.prototype.render = function () {
        var _a = this.props, className = _a.className, size = _a.size, block = _a.block, disabled = _a.disabled, loading = _a.loading, props = __rest(_a, ["className", "size", "block", "disabled", "loading"]);
        var classes = classnames(className);
        return (React__default.createElement(HollowButtonWrapper, __assign({ type: "button" }, props, { className: classes, onClick: this.onClick, disabled: disabled || loading }), loading ? (React__default.createElement(Fragment, null,
            React__default.createElement(LoaderCircle$3, { size: 30 }),
            React__default.createElement(InvisibleText, null, this.props.children))) : (this.props.children)));
    };
    HollowButton.defaultProps = {
        block: false,
        active: false,
        disabled: false,
        outline: false
    };
    return HollowButton;
}(React__default.Component));
var HollowButtonWrapper = styled('button')(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["\n  ", "\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ", ";\n  height: ", ";\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 13px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: #fff;\n\n  &:disabled,\n  &.disabled {\n    color: ", ";\n  }\n\n  &:not(:disabled):not(.disabled) {\n    &:hover {\n      background-color: ", ";\n      color: ", ";\n    }\n\n    &:focus {\n      box-shadow: unset;\n\n      color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  i::before {\n    height: unset;\n    line-height: unset;\n  }\n"], ["\n  ", "\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ", ";\n  height: ", ";\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 13px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: #fff;\n\n  &:disabled,\n  &.disabled {\n    color: ", ";\n  }\n\n  &:not(:disabled):not(.disabled) {\n    &:hover {\n      background-color: ", ";\n      color: ", ";\n    }\n\n    &:focus {\n      box-shadow: unset;\n\n      color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  i::before {\n    height: unset;\n    line-height: unset;\n  }\n"])), ButtonBase, function (props) { return (props.size === 'sm' ? '8px 16px' : '10px 24px'); }, function (props) { return (props.size === 'sm' ? '32px' : '40px'); }, variables.colors.gray70, variables.colors.gray30, variables.colors.gray50, variables.colors.gray10, variables.colors.gray70, variables.colors.white, variables.colors.gray70);
var LoaderCircle$3 = styled(Circle)(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject(["\n  position: absolute;\n  left: 50%;\n  margin-left: -16px;\n"], ["\n  position: absolute;\n  left: 50%;\n  margin-left: -16px;\n"])));
var templateObject_1$7, templateObject_2$3;

var IconicButton = (function (_super) {
    __extends(IconicButton, _super);
    function IconicButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClick = function (e) {
            if (_this.props.disabled) {
                e.preventDefault();
                return;
            }
            if (_this.props.onClick) {
                _this.props.onClick(e);
            }
        };
        return _this;
    }
    IconicButton.prototype.render = function () {
        var _a = this.props, className = _a.className, size = _a.size, block = _a.block, disabled = _a.disabled, loading = _a.loading, variant = _a.variant, props = __rest(_a, ["className", "size", "block", "disabled", "loading", "variant"]);
        var classes = classnames(variant, className);
        return (React__default.createElement(IconicButtonWrapper, __assign({ type: "button" }, props, { className: classes, onClick: this.onClick, disabled: disabled }), loading ? (React__default.createElement(Fragment, null,
            React__default.createElement("span", { className: "invisible" }, this.props.children))) : (this.props.children)));
    };
    IconicButton.defaultProps = {
        block: false,
        active: false,
        disabled: false,
        outline: false,
        size: 'md',
        variant: 'default'
    };
    return IconicButton;
}(React__default.Component));
var IconicButtonWrapper = styled('button')(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["\n  ", "\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ", ";\n  height: ", ";\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 13px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: ", ";\n\n  &.primary {\n    color: ", ";\n\n    &:not(:disabled):not(.disabled) {\n      &:hover {\n        color: ", ";\n      }\n\n      &:focus {\n        color: ", ";\n        background-color: ", ";\n      }\n    }\n  }\n\n  &.danger {\n    color: ", ";\n\n    &:not(:disabled):not(.disabled) {\n      &:hover {\n        color: ", ";\n      }\n\n      &:focus {\n        color: ", ";\n        background-color: ", ";\n      }\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background: ", ";\n    color: ", ";\n  }\n\n  &:not(:disabled):not(.disabled) {\n    &:hover {\n      background-color: ", ";\n      color: ", ";\n    }\n\n    &:focus {\n      box-shadow: unset;\n\n      color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  i::before {\n    height: unset;\n    line-height: unset;\n  }\n"], ["\n  ", "\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ", ";\n  height: ", ";\n  border-radius: 6px;\n  font-weight: 700;\n  font-size: 13px;\n  line-height: 1.45;\n\n  color: ", ";\n  border: 1px solid ", ";\n  background: ", ";\n\n  &.primary {\n    color: ", ";\n\n    &:not(:disabled):not(.disabled) {\n      &:hover {\n        color: ", ";\n      }\n\n      &:focus {\n        color: ", ";\n        background-color: ", ";\n      }\n    }\n  }\n\n  &.danger {\n    color: ", ";\n\n    &:not(:disabled):not(.disabled) {\n      &:hover {\n        color: ", ";\n      }\n\n      &:focus {\n        color: ", ";\n        background-color: ", ";\n      }\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    background: ", ";\n    color: ", ";\n  }\n\n  &:not(:disabled):not(.disabled) {\n    &:hover {\n      background-color: ", ";\n      color: ", ";\n    }\n\n    &:focus {\n      box-shadow: unset;\n\n      color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  i::before {\n    height: unset;\n    line-height: unset;\n  }\n"])), ButtonBase, function (props) { return (props.size === 'sm' ? '8px 16px' : '10px 24px'); }, function (props) { return (props.size === 'sm' ? '32px' : '40px'); }, variables.colors.gray70, variables.colors.gray30, variables.colors.white, variables.colors.kataBlue, variables.colors.darkKataBlue, variables.colors.white, variables.colors.gray70, variables.colors.red, darken(0.15, variables.colors.red), variables.colors.white, variables.colors.gray70, variables.colors.gray10, variables.colors.gray50, variables.colors.gray10, variables.colors.gray70, variables.colors.white, variables.colors.gray70);
var templateObject_1$8;

export { Button, ButtonWrapper, ButtonGroup, FloatingButton, SupportButton, ToggleButton, HollowButton, IconicButton, ButtonBase };
//# sourceMappingURL=index.es.js.map
