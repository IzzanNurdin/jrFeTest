import * as React from 'react';
export declare type ButtonColors = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'white';
export declare type ButtonSizes = 'lg' | 'sm';
export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    disabled?: boolean;
    color?: ButtonColors;
    size?: ButtonSizes;
    block?: boolean;
    isIcon?: boolean;
    className?: string;
    onClick?: any;
    type?: string;
    active?: boolean;
    loading?: boolean;
    outline?: boolean;
}
export declare class Button extends React.Component<ButtonProps> {
    static defaultProps: {
        color: ButtonColors;
        type: string;
        size: ButtonSizes;
        block: boolean;
        active: boolean;
        disabled: boolean;
        outline: boolean;
    };
    constructor(props: ButtonProps);
    onClick(e: React.MouseEvent<HTMLButtonElement>): void;
    render(): JSX.Element;
}
export default Button;
export declare const ButtonWrapper: import("styled-components").StyledComponent<"button", any, {}, never>;
//# sourceMappingURL=Button.d.ts.map