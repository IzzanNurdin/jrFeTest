import { createElement, Component, createContext } from 'react';

var colors = {
    white: '#ffffff',
    red: '#e53935',
    green: '#00c853',
    yellow: '#ffc400',
    softKataBlue: '#d8ebff',
    lightKataBlue: '#7fbcff',
    kataBlue: '#006fe6',
    darkKataBlue: '#0056b3',
    lightCobalt: '#6386c7',
    semiCobalt: '#2662cf',
    cobalt: '#2053af',
    darkCobalt: '#19428c',
    gray10: '#f6f7f8',
    gray20: '#edf1f2',
    gray30: '#e2e6e8',
    gray40: '#c2c7c8',
    gray50: '#949a9d',
    gray60: '#676b6d',
    gray70: '#484c4f',
    gray80: '#24282d',
    special01: '#f8bbd0',
    special02: '#e8bbf8',
    special03: '#bbcaf8',
    special04: '#bbe7f8',
    special05: '#bbf8ee',
    special06: '#bbf8c4',
    special07: '#d6f8bb',
    special08: '#f5f8bb',
    special09: '#f8e5bb',
    special10: '#f8cebb',
    neutral01: '#fff',
    neutral02: '#f6f7f8',
    neutral03: '#edf1f2',
    neutral04: '#e2e6e8',
    neutral05: '#c2c7c8',
    neutral06: '#949a9d',
    neutral07: '#676b6d',
    neutral08: '#484c4f',
    neutral09: '#2b2f33',
    cobalt01: '#5597e0',
    cobalt02: '#2053af',
    cobalt03: '#102a59',
    kata01: '#4da3ff',
    kata02: '#006fe6',
    kata03: '#003e80',
    green01: '#00ea61',
    green02: '#59a444',
    green03: '#658f3d',
    red01: '#fc6627',
    red02: '#dc211c',
    red03: '#af1a16',
    yellow01: '#feef99',
    yellow02: '#fde034',
    yellow03: '#ebc902'
};
var fontSizes = {
    deka: 12,
    hecto: 14,
    kilo: 16,
    mega: 18,
    giga: 20,
    tera: 24,
    peta: 28
};
var lineHeights = {
    deka: 1.25,
    hecto: 1.5,
    kilo: 1.5,
    mega: 1.25,
    giga: 1.25,
    tera: 1.125,
    peta: 1.125
};
var breakpoints = {
    sm: 1024,
    md: 1280,
    lg: 1440,
    xl: 1600
};
var breaks = {
    breakSmall: '1024px',
    breakMedium: '1280px',
    breakLarge: '1366px'
};
var elevationShadow = {
    elevationZ100: '0 1px 2px 0 rgba(0, 0, 0, 0.25)',
    elevationZ200: '0 2px 4px 0 rgba(0, 0, 0, 0.25)',
    elevationZ300: '0 4px 8px 0 rgba(0, 0, 0, 0.25)',
    elevationZ400: '0 8px 16px 0 rgba(0, 0, 0, 0.25)',
    elevationZ500: '0 12px 24px 0 rgba(0, 0, 0, 0.25)'
};
var layerShadows = {
    layer100Shadow: '0 1px 1px 0 rgba(0, 0, 0, 0.25)',
    layer200Shadow: '0 2px 4px 1px rgba(0, 0, 0, 0.15)',
    layer300Shadow: '0 4px 6px 2px rgba(0, 0, 0, 0.15)',
    layer400Shadow: '0 6px 10px 2px rgba(0, 0, 0, 0.15)'
};
var spacing = {
    spacing2Xs: 2,
    spacingXs: 4,
    spacingSm: 8,
    spacingSmMd: 12,
    spacingMd: 16,
    spacingLg: 24,
    spacingXl: 40,
    spacing2Xl: 64,
    spacing3Xl: 80
};
var spaces = {
    space1: '0.615384615rem',
    space2: '1.230769231rem',
    space3: '1.846153846rem',
    space4: '2.461538462rem',
    space5: '3.076923077rem',
    space6: '3.692307692rem',
    space7: '4.307692308rem',
    space8: '4.923076923rem',
    space9: '5.538461538rem',
    space10: '6.153846154rem'
};
var borderRadiuses = {
    borderRadiusXs: '2px',
    borderRadiusSmall: '4px',
    borderRadiusMedium: '6px',
    borderRadiusLarge: '8px',
    xs: 2,
    sm: 4,
    md: 6,
    lg: 8
};
var transitions = {
    transitionFast: '0.3s',
    transitionNormal: '0.5s',
    transitionSlow: '0.75s',
    transitionEasing: 'ease'
};
var fontProps = {
    rootFontSize: '13px',
    rootLineHeight: '20px',
    h1FontSize: '1.85rem',
    h1FontWeight: '500',
    h1LineHeight: '2.461rem',
    h2FontSize: '1.5rem',
    h2FontWeight: '500',
    h2LineHeight: '2.153rem',
    titleFontSize: '1.25rem',
    titleFontWeight: '500',
    titleLineHeight: '1.846rem',
    subtitleFontSize: '1.075rem',
    subtitleFontWeight: '700',
    subtitleLineHeight: '1.538rem',
    labelFontSize: '0.925rem',
    labelFontWeight: '700',
    labelLineHeight: '1.384rem',
    labelLetterSpacing: '0.2px',
    smallFontSize: '0.85rem',
    smallFontWeight: '700',
    smallLineHeight: '1.23rem',
    bodyFontSize: '1rem',
    bodyFontWeight: 'normal',
    bodyLineHeight: '2',
    tooltipFontSize: '1rem',
    tooltipFontWeight: 'normal',
    tooltipLetterSpacing: '0.2px'
};
var variables = {
    breaks: breaks,
    colors: colors,
    spaces: spaces,
    borderRadiuses: borderRadiuses,
    layerShadows: layerShadows,
    transitions: transitions,
    fontProps: fontProps,
    spacing: spacing,
    breakpoints: breakpoints,
    fontSizes: fontSizes,
    lineHeights: lineHeights,
    elevationShadow: elevationShadow
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var defaultTheme = {
    backgroundColor: variables.colors.gray10,
    linkColor: variables.colors.kataBlue,
    linkColorHover: variables.colors.darkKataBlue,
    linkColorActive: variables.colors.darkKataBlue,
    linkColorOutline: variables.colors.lightKataBlue,
    headingColor: variables.colors.gray80,
    textColor: variables.colors.gray70,
    borderColor: 'transparent',
    focusOutlineColor: variables.colors.softKataBlue,
    mutedHeadingColor: variables.colors.gray60,
    mutedTextColor: variables.colors.gray50
};

var ThemeContext = createContext(defaultTheme);
var Provider = ThemeContext.Provider;
var Consumer = ThemeContext.Consumer;

var Theme = (function (_super) {
    __extends(Theme, _super);
    function Theme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Theme.prototype.render = function () {
        var _a = this.props, values = _a.values, children = _a.children;
        return (createElement(Consumer, null, function (parentTheme) {
            var merged = __assign({}, parentTheme, values);
            if (typeof children === 'function') {
                return children(merged);
            }
            return createElement(Provider, { value: merged }, children);
        }));
    };
    return Theme;
}(Component));

var ThemedComponent = function (_a) {
    var color = _a.color, themes = _a.themes, children = _a.children;
    return (createElement(Theme, { values: color && typeof color === 'string' && themes[color]
            ? themes[color]
            : themes.defaultTheme }, children));
};

export default ThemedComponent;
export { variables, Theme, defaultTheme, Provider as KataThemeProvider, Consumer as KataThemeConsumer };
//# sourceMappingURL=index.es.js.map
