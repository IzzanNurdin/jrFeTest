import * as React from 'react';
export interface ModalProps {
    show: boolean;
    noBackdrop?: boolean;
    className?: string;
    labelledById?: string;
    onClose(): void;
}
export interface ToggleableProps {
    show?: boolean;
}
export interface ModalState {
    show: boolean;
    visible: boolean;
}
declare class Modal extends React.Component<ModalProps, ModalState> {
    static defaultProps: {
        noBackdrop: boolean;
    };
    el: HTMLDivElement;
    state: {
        show: boolean;
        visible: boolean;
    };
    constructor(props: ModalProps);
    static getDerivedStateFromProps(props: ModalProps, state: ModalState): {
        show: false;
        visible: boolean;
    } | {
        show: true;
        visible: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleKeyDown(event: React.KeyboardEvent): void;
    onCloseDrawer(): void;
    watchOverflow(position: number): void;
    getContextAPI(): {
        show: boolean;
        overflow: boolean;
        labelledById: string | undefined;
        watchOverflow: (position: number) => void;
        onClose: () => void;
    };
    render(): React.ReactPortal;
}
export default Modal;
//# sourceMappingURL=Modal.d.ts.map