{"ast":null,"code":"var _jsxFileName = \"E:\\\\IzzanNurdin\\\\Job\\\\Tests\\\\Kata\\\\jr-fe-test\\\\src\\\\modules\\\\home\\\\heroes-demo\\\\HeroesList.Container.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getHeroesLoading, getHeroesErrors, getHeroesData, getHeroesIndex } from \"~/stores/heroes/selectors\";\nimport { fetchRequest } from \"../../stores/heroes/actions\";\nimport HeroesList from \"./HeroesList\";\n\nvar HeroesListContainer = function HeroesListContainer(_ref) {\n  var loading = _ref.loading,\n      index = _ref.index,\n      data = _ref.data,\n      fetch = _ref.fetch;\n  return React.createElement(HeroesList, {\n    loading: loading,\n    index: index,\n    data: data,\n    fetchRequest: fetch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var heroes = _ref2.heroes;\n  return {\n    loading: getHeroesLoading(heroes),\n    errors: getHeroesErrors(heroes),\n    index: getHeroesIndex(heroes),\n    data: getHeroesData(heroes)\n  };\n}; // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetch: function fetch() {\n      return dispatch(fetchRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeroesListContainer);","map":{"version":3,"sources":["E:\\IzzanNurdin\\Job\\Tests\\Kata\\jr-fe-test\\src\\modules\\home\\heroes-demo\\HeroesList.Container.tsx"],"names":["React","connect","getHeroesLoading","getHeroesErrors","getHeroesData","getHeroesIndex","fetchRequest","HeroesList","HeroesListContainer","loading","index","data","fetch","mapStateToProps","heroes","errors","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAIA,SACEC,gBADF,EAEEC,eAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,2BALP;AAMA,SAASC,YAAT,QAA6B,6BAA7B;AAGA,OAAOC,UAAP,MAAuB,cAAvB;;AAeA,IAAMC,mBAAoC,GAAG,SAAvCA,mBAAuC;AAAA,MAC3CC,OAD2C,QAC3CA,OAD2C;AAAA,MAE3CC,KAF2C,QAE3CA,KAF2C;AAAA,MAG3CC,IAH2C,QAG3CA,IAH2C;AAAA,MAI3CC,KAJ2C,QAI3CA,KAJ2C;AAAA,SAM3C,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,YAAY,EAAEC,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAN2C;AAAA,CAA7C;;AAcA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,QAA2B;AAAA,MAAxBC,MAAwB,SAAxBA,MAAwB;AACjD,SAAO;AACLL,IAAAA,OAAO,EAAEP,gBAAgB,CAACY,MAAD,CADpB;AAELC,IAAAA,MAAM,EAAEZ,eAAe,CAACW,MAAD,CAFlB;AAGLJ,IAAAA,KAAK,EAAEL,cAAc,CAACS,MAAD,CAHhB;AAILH,IAAAA,IAAI,EAAEP,aAAa,CAACU,MAAD;AAJd,GAAP;AAMD,CAPD,C,CASA;AACA;;;AACA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAyB;AAClDL,IAAAA,KAAK,EAAE;AAAA,aAAMK,QAAQ,CAACX,YAAY,EAAb,CAAd;AAAA;AAD2C,GAAzB;AAAA,CAA3B;;AAIA,eAAeL,OAAO,CACpBY,eADoB,EAEpBG,kBAFoB,CAAP,CAGbR,mBAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { RootStore } from \"~/interfaces/stores\";\r\nimport { Hero } from \"~/interfaces/heroes\";\r\nimport {\r\n  getHeroesLoading,\r\n  getHeroesErrors,\r\n  getHeroesData,\r\n  getHeroesIndex\r\n} from \"~/stores/heroes/selectors\";\r\nimport { fetchRequest } from \"../../stores/heroes/actions\";\r\nimport { DataMap } from \"~/interfaces/types\";\r\n\r\nimport HeroesList from \"./HeroesList\";\r\n\r\ninterface PropsFromState {\r\n  loading: boolean;\r\n  errors?: string;\r\n  index: string[];\r\n  data: DataMap<Hero>;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  fetch: typeof fetchRequest;\r\n}\r\n\r\ntype Props = PropsFromState & PropsFromDispatch;\r\n\r\nconst HeroesListContainer: React.FC<Props> = ({\r\n  loading,\r\n  index,\r\n  data,\r\n  fetch\r\n}) => (\r\n  <HeroesList\r\n    loading={loading}\r\n    index={index}\r\n    data={data}\r\n    fetchRequest={fetch}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = ({ heroes }: RootStore) => {\r\n  return {\r\n    loading: getHeroesLoading(heroes),\r\n    errors: getHeroesErrors(heroes),\r\n    index: getHeroesIndex(heroes),\r\n    data: getHeroesData(heroes)\r\n  };\r\n};\r\n\r\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\r\n// You can access these via `this.props`.\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  fetch: () => dispatch(fetchRequest())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HeroesListContainer);\r\n"]},"metadata":{},"sourceType":"module"}